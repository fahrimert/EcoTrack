
    //bu iki entegrasyon testine bidaha bakıcam bu iki entegrasyon testini yapmayacağım servis veya controller testlerini de yapmadım data yapısı çok complex çünkü
//        void  getSuperVizorPropertiesForRadarChart() throws  Exception {
//            UserRequestDTO validRequest = new UserRequestDTO(
//            );
//            validRequest.setEmail("manageruser@example.com");
//            validRequest.setFirstName("ManagerUser");
//            validRequest.setPassword("test1234");
//
//
//            ResponseEntity<Map> response = restTemplate.postForEntity(
//                    "/auth/login",
//                    validRequest,
//                    Map.class
//            );
//
//            assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
//            Map<String, String> data = (Map<String, String>) response.getBody().get("data");
//
//            String token = (String) data.get("accessToken");
//            assertNotNull(token);
//
//            User testUser = new User();
//            testUser.setFirstName("SupervizorTest");
//            testUser.setEmail("supervizorTest@example.com");
//            testUser.setRole(Role.SUPERVISOR);
//
//            User returnedUser = userRepositoryy.saveAndFlush(testUser);
//
//            Task task = new Task();
//            task.setAssignedTo(testUser);
//            task.setCreatedAt(LocalDateTime.now().minusMinutes(30));
//            task.setTaskCompletedTime(Date.from(Instant.now()));
//            task.setWorkerArrived(true);
//            Task returnedTask = taskRepositoryy.saveAndFlush(task);
//
//
//
//            HttpHeaders httpHeaders = new HttpHeaders();
//            httpHeaders.setBearerAuth(token);
//            HttpEntity<Void> entity = new HttpEntity<>(httpHeaders);
//
//
//
//            ResponseEntity<String> responseGetSupervizorTask = restTemplate.exchange(
//                    "/manager/getSuperVizorPropertiesForRadarChart/" + returnedUser.getId(),
//                    HttpMethod.GET,
//                    entity,
//                    String.class
//            );
//
//
//
//
//        ObjectMapper mapper = new ObjectMapper();
//            List<Map<String, Integer>> result = mapper.readValue(responseGetSupervizorTask.getBody(), new TypeReference<List<Map<String, Integer>>>() {});
//
//
//        System.out.println(result);
//        System.out.println(responseGetSupervizorTask.getBody());
//            assertEquals(HttpStatus.OK,response.getStatusCode());
//
//
//
//            assertNotNull(response.getBody());
//            assertNotNull(result.contains("Given Tasks Solved Before Deadline Ratio For Worker"));
//            assertNotNull(result.contains(("Given Tasks Finished Ratio For Worker")));
//            assertNotNull(result.contains(("Given Tasks And Session Final Status Actıve Ratio For Worker")));
//            assertNotNull(result.contains(("Given Tasks And Session Final Status Not Actıve Ratio For Worker")));
//
//        }
//
//    @Test
//    void  getWorkerPropertiesForRadarChart() throws  Exception{
//        UserRequestDTO validRequest = new UserRequestDTO(
//        );
//        validRequest.setEmail("manageruser@example.com");
//        validRequest.setFirstName("ManagerUser");
//        validRequest.setPassword("test1234");
//
//
//        ResponseEntity<Map> response = restTemplate.postForEntity(
//                "/auth/login",
//                validRequest,
//                Map.class
//        );
//
//        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
//        Map<String, String> data = (Map<String, String>) response.getBody().get("data");
//
//        String token = (String) data.get("accessToken");
//        assertNotNull(token);
//
//        HttpHeaders httpHeaders = new HttpHeaders();
//        httpHeaders.setBearerAuth(token);
//        HttpEntity<Void> entity = new HttpEntity<>(httpHeaders);
//
//
//        Map<String, Long> uriVariables = new HashMap<>();
//        uriVariables.put("id", 5L);
//
//
//        ResponseEntity<String> responseGetSupervizorTask = restTemplate.exchange(
//                "/manager/getWorkerPropertiesForRadarChart/" + 5L,
//                HttpMethod.GET,
//                entity,
//                String.class
//        );
//        ObjectMapper mapper = new ObjectMapper();
//        List<Map<String, Integer>> result = mapper.readValue(responseGetSupervizorTask.getBody(), new TypeReference<List<Map<String, Integer>>>() {});
//
//
//
//        assertEquals(HttpStatus.OK,response.getStatusCode());
//
//
//
//        assertNotNull(response.getBody());
//        System.out.println(result);
//        assertNotNull(result.get(0).get("Given Tasks Solved After Deadline Ratio For Worker"));
//
//        System.out.println(result.get(0));
//        assertNotNull(result.contains("Given Tasks Solved Before Deadline Ratio For Worker"));
//        assertNotNull(result.contains(("Given Tasks Finished Ratio For Worker")));
//        assertNotNull(result.contains(("Given Tasks And Session Final Status Actıve Ratio For Worker")));
//        assertNotNull(result.contains(("Given Tasks And Session Final Status Not Actıve Ratio For Worker")));
//
//    }